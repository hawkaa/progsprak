#
# UTVIDELSER AV DEN DEKLARATIVE MODELLEN
#

# The declerative kernel language

Innfører følgende statements:
    skip                                        Empty statement
    <s1> <s2>                                   Statement sequence
    local <x> in <s> end                        Variable creation
    <x1> = <x2>                                 Variable-variable binding
    <x> = <v>                                   Value creationg
    if <x> then <s1> else <s2> end              Conditional
    case <x> of <pat> then <s1> else <s2> end   Pattern matching
    { <x> <y1> ... <yn> }                       Procedure application

Eksekveringstilstand:
    DSKL definerer en abstrakt maskin.

    Single-assigment store (\sigma):
        Delt opp i variable som er like men ubundet og varibale som er knyttet til en verdi.
    Environment:
        Mapping fra variabelidentifikatorer til verdier i single-assigment store.
    Semantisk setning:
        (<s>, E), setning med tilhørende miljø.
    Execution state:
        (ST, \sigma) Stack ST med tilhørende single-assignment store.




# The declarative computation model with exceptions

Innfører følgende statements:
    try <s1> catch <x> then <s2> end            Exception context
    raise <x> end                               Raise exception


Semantikk:
    
    try:
        (try <s1> catch <x> then <s2> end, E)
        - Dytt (catch <x> then <s2> end, E)
        - Dytt (<s1>, E)

    raise:
        (raise <x> end, E)
        - Popp elementer til du finner catch. Hvis du ikke finner, stopp eksekvering med feilmelding: "Uncaught exception"
        - La (catch <y> then <s> end, Ec)
        - Dytt (<s>, Ec + {<y> -> E(<x>)})

    catch:
        (catch <x> then <s> end, E)
        - Popp av stakken

Annet:
    Dersom denne modellen brukes sammen med concurrency, er det fare for at man får en unifikasjonsfeil som IKKE får programmet til å stoppe. Programmet blir derfor ikke-deterministisk, og derfor ikke deklarativt.

# The declarative model with secure types

Innfører følgende statements:
    {NewName <x>}                               Name creation
    <y>=!!<x>                                   Read-only view

# The concurrent data-driven declarative model

Innfører følgende statements:
    thread <s> end                              Thread creation


# The concurrent demand-driven declarative model

Utvider "The concurrent data-driven declarative model" med følgende statements:
    {ByNeed <x> <y>}                            Trigger creation

Utvider eksekveringstilstand:
    Legger til "trigger store" \tau, slik at vi får (MST, \sigma, \tau).

Semantikk
    
    trigger creation:
        ({ByNeed <x> <y>}, E)
        - Hvis E(<y>) er ubestemt, legg til trigger trig(E(<x>), E(<y>)) i \tau.
        - Hvis E(<y>) er bestemt, legg til en ny tråd med initielt statement ({<x> <y>}, E)

    trigger activation:
        Hvis \tau inneholder trig(x, y) og man trenger y, med andre ord det er en tråd som er suspended som venter på at y skal bli bestemt, eller noen som forsøker å binde y, gjør følgende:
        - Fjern triggeren fra \tau.
        - Lag en ny tråd med start-tilstand ({<x> <y>}, {<x> -> x, <y> -> y})
            


Annet:
    
    {ByNeed P Y} gjør det samme som 'thread {P Y} end', bortsett fra at thread alltid vil kjøre (til slutt), men ByNeed kjører når Y trengs.

    Lat utførelse forutsetter samtidighet, siden den late funksjonen utføres i en egen tråd.


# The message-passing concurrent model
Innfører følgende statements:
    {NewPort <y> <x>}                           Port creation
    {Send <x> <y>}                              Port send

# The declarative model with explicit state
Innfører følgende statements:
    {NewCell <x> <y>}
    {Exchange <x> <y> <z>}
Beholder ikke concurrency.

# The shared-state concurrent model
Beholder elementer fra "The declarative model with explicit state" og "The concurrent data-driven declarative model"

# The relational computation model
Innfører to nye statements:
    chocie - Ikke-deterministisk. Grupperer sammen et sett med alternativer.
    fail - Alternativet er feil. Denne blir kalt implisitt ved unifikasjonsfeil.

#
# DECLARATIVE COMPUTATION MODEL
#

# Deklarativ programenhet er:
    Stateless.
    Independent.
    Deterministic.

# Observational declarativity
    Hvis mellomfjeset til en komponent oppfører seg deklarativt, har vi observational declarativity. Det kan godt hende den opererer med ikke-deklarative mekanikker intern. Med andre ord, all bruk av enheten vil gi samme output for gitt input.


#
# Declarative Programming Techniques
#

# Higher order programming
Definisjon: Å kunne bruke funksjoner som første-klasse objekter/verdier.

Fire operasjoner som ligger under høyere-ordens-programmering
    1. Procedural abstraction. Muligheten til å konvertere et hvilken som helst statement inn i en prosedyreverdi.
    2. Genericity. Kunne sende prosedyreverdier som parametre til en funksjon.
    3. Instantiation. Kunne returnere en prosedyreverdi fra et prosedyrekall
    4. Emdebbing. Putte prosedyreverdier i datastrukturer.

#
# DECLARATIVE CONCURRENCY
#

# Kan dette fortsatt være deklarativt?
Ja, dataflytvariable i Oz sørger for at verdier alltid bindes til samme verdi, eller så får vi unifikasjonsfeil som terminerer programmet. Verdier kan hende at blir bundet i ulik rekkefølge, men dette har ikke noe å si på beregnningen.

Man kan også si nei, fordi med concurrency er ikke programmet lenger deklarativt i individuelle deler, bare observational declarative. Det kan hende at et prosedyrekall får ubundede variable én gang, bundede en annen gang.



# Lazy execution
Programmeringsparadigme som sier at beregning ikke gjøres før det er nødvendig. Tillater strømmer og rekursive strukturer, gjør det enklere med modularisering og synkronisering.

#
# PARAMETRE
#

En variabel funnet i en funksjonsdefinisjon. Formal parameters refererer til variablene, actual parameters til verdiene.

# Parameter passing

# Call by reference: Prosedyren har tilgang til variablen som aktuelt parameter, man kan binde variablen i prosedyren. Standart i oz.
# Call by variable: Spesialtilfelle av ovenfor. Kopierer referansen og bruker denne som et alias til den aktuelle variablen.
# Call by value: Verdien kopierers, prosedyren kan ikke endre eller binde parameteret.
# Call by value-result: Får en lokal kopi, men overskriver kopien når prosedyren er ferdig. Med andre ord
# Call by name: Det blir sendt inn en thunk til metoden, et funksjonskall som returnerer verdien. Lat utførelse uten memoisering
# Call by need: Thunkene blir lagret én gang. Lat evaluering med memoisering.


#
# ANNET
#

# Statement og expression
Et statement er det samme som en setning. Dette er "a complete unit of execution".
En expression er et oppbygning av variable og funksjonskall som evaluerer til en enkelt verdi.

# SolveOne og SolveAll
SolveOne regner ut den late listen med {Solve $}, og returnerer første resultat (hvis det finnes).
SolveAll regner ut den late listen med {Solve $}, og kjører {TouchAll $} på listen, en funksjon som tvinger alle elementene til å bli generert. Når man kaller SolveAll må man definere en ny funksjon, som dette:
    {SolveAll fun {$} {MyRelativeFunction X Y ... Z} end}

# Closure
En closure er en funksjon sammen med tilhørende miljø. Dette er ulikt en funksjonspeker, som bare peker til funksjonen. En funksjon i en closure har da mulighet til å nå eksterne variable uten å være i nærheten av sit leksikalske skop.

# Syntax
En syntaks forklarer strukturen i et språk, gjerne uttrykt ved hjelp av en gramatikk. Det bestemmer hvordan tokens kan passe sammen for å lage et program (makrosyntaks) og hvorda en token kan bli bygd opp (mikrosyntaks)

# Semantikk
Semantikk bestemmer hvordan elementene i syntakser skal bli forstått hva angår programeksekvering.

# Linguistic abstraction
Dette er både en abstraksjon og et tillegg til språkets syntax. Erkeekspmpelet på dette er en å gå fra prosedyrekall til funksjonskall. Først legger vi til i syntaksen:
    
    <expression> ::= fun '{' $ { <id> }* '}' [<statement] <expression> end
    <expression> ::= '{' <id> {<id>}* '}'

Så må vi forklare hvordan vi oversetter fra den ene til den andre
    
    Foo = fun {$ P1 P2 ... Pn} <statement> <expression> end
    Bar = {Foo A1 A2 ... An}

oversettes til:
    Foo = proc {$ P1 P2 ... Pn ?Ret} <statement> Ret=<expression> end
    {Foo A1 A2 ... An Bar}.


# Syntactic sugar
Mye likt som Linguistic Abstraction, men gir ikke en ny abstraksjon, bare gjør programmet mer lesbart og kortfattelig. Erkeeksempel her er flere variable i Local:
<statement> ::= local {<id>}* in <statement> end

Så må vi få til oversettingen:
local X1 ... Xn in <statement> end
blir til
local X1 in
    ...
        local XN in
            <statement>
        end
end


# Bundede og ubundede variable
    I et leksikalsk skop er X bundet i denne setningen:
        local X
            X = 1
        end
    I et leksikalsk skop er X ubundet i denne setningen:
        X = 1
    I et dynamisk skop har vi følgende eksempel:
        1 local X Y in
        2 X = Y
        3 Y = 2
        4 end
    I løpet av kjøretiden her vil X og Y bindes, først til hverandre (delvis bundede), så til tallet 2.

#
# NYTTIGE TING I OZ
# 

# For-løkke
for I in A..B;S do <s> end

#Foreach-løkke
for X in L do <s> end

#
# GRAMATIKKER OG PARSING
#

# Rekursiv nedstingningsparsing
Gjør om
    <name list> ::= <name> | <name> ',' <name list>
til
    <name list> ::= <name> [, <name list>]
Dette er fordi vi ikke kan ha en regel som begge starter med <name>. Vi venstrefaktoriserer den.

#
# Gramatikkparsere
#

# Relational boolean grammar parser
\insert 'Solve.oz'

declare
fun {Parse Tokens}
   fun {Expression Before After}
      case After of [X] then
	 % Try to unify Before with nil to see that After is the only element left.
	 Before = nil
	 % Return X, as its the only element left
	 X
      [] H|T then
	 choice
	    % Try to match it with a
	    H = 'a'
	    a({Expression nil Before} {Expression nil T})
	 []
	    % Try to match it with o
	    H = 'o'
	    o({Expression nil Before} {Expression nil T})
	 []
	    % Try to match it with n
	    H = 'n'
	    n({Expression nil T})
	 []
	    % Or we could just try to send it away
	    {Expression {Append Before [H]} T}
	 end
      else
	 % No more elements, obviously not going to lead anywhere.
	 fail
      end
      
   end
in
   {SolveAll fun {$} {Expression nil Tokens} end}
end

fun {Eval ParseTree}
   case ParseTree of a(Exp1 Exp2) then
      {Eval Exp1} andthen {Eval Exp2}
   [] o(Exp1 Exp2) then
      {Eval Exp1} orelse {Eval Exp2}
   [] n(Exp) then
      if {Eval Exp} then false else true end
   [] f then
      false
   [] t then
      true
   end
   
end
%   case ParseTree of a(Exp1 Exp2) then
      

{Browse {Eval o(n(t) o(t f))}}  

# Rekursiv parser for SQL
are
fun {Expr In ?Out}
   case In of nm(N)|'='|vl(V)|Rest then
      Out = Rest
      equal(N V)
   end
end

fun{NameList In ?Out}
   case In of nm(N)|','|R then
      nm(N)|{NameList R Out}
   [] nm(N)|R then
      Out = R
      nm(N)
   end
end

fun{Select In ?Out}
   NL
   NLr
   NL2
   NL2r
   E
   ER
in
   case In of 'select'|T then
      NL = {NameList T NLr}
   end
   case NLr of 'from'|T then
      NL2 = {NameList T NL2r}
   end
   case NL2r of 'where'|T then
      E = {Expr T ER}
   end
   Out = ER
   sel(NL NL2 E)
end

#
# ANNEN NYTTIG KODE
#

#Velger ett element fra en liste og returnerer en tuppel med element#resten_av_liste
{PickkOneR L}
   case L of [X] then
      X#nil
   [] H|T then
      choice
     H#T
      [] X#L = {PickOneR T} in
     X#{Append [H] L}
      end
   end    
end
